
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–∞—Ä—Ç—ã –∏ –º–∞—Å—Ç–∏ –¥–ª—è –∫–æ–ª–æ–¥—ã 36 –∫–∞—Ä—Ç
ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
suits = ['‚ô£Ô∏è', '‚ô¶Ô∏è', '‚ô•Ô∏è', '‚ô†Ô∏è']

def create_deck():
    return [r + s for s in suits for r in ranks]

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤: –∫–æ–ª–æ–¥–∞, —Ä—É–∫–∏, –∫–æ–∑—ã—Ä—å, —Ö–æ–¥, –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç–æ–ª–µ
games = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(
    KeyboardButton("üÉè –ù–∞—á–∞—Ç—å –∏–≥—Ä—É"),
    KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã"),
    KeyboardButton("üö™ –°–¥–∞—Ç—å—Å—è")
)

def get_cards_kb(cards):
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    kb.add(*[KeyboardButton(card) for card in cards])
    kb.add(KeyboardButton("üö™ –°–¥–∞—Ç—å—Å—è"))
    return kb

def card_value(card):
    # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–∞–Ω–≥–∞
    return ranks.index(card[:-2]) if card[:-2] in ranks else ranks.index(card[:-1])

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —Å—ã–≥—Ä–∞—Ç—å –≤ '–î—É—Ä–∞–∫–∞'? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üÉè –ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
async def start_game(message: types.Message):
    user_id = message.from_user.id
    deck = create_deck()
    random.shuffle(deck)

    # –ö–æ–∑—ã—Ä—å - –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ –≤ –∫–æ–ª–æ–¥–µ
    trump = deck[-1]
    trump_suit = trump[-2:] if len(trump) == 3 else trump[-1]

    # –†–∞–∑–¥–∞–µ–º –ø–æ 6 –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫—É –∏ –±–æ—Ç—É
    player_hand = [deck.pop() for _ in range(6)]
    bot_hand = [deck.pop() for _ in range(6)]

    games[user_id] = {
        "deck": deck,
        "trump": trump,
        "trump_suit": trump_suit,
        "player_hand": player_hand,
        "bot_hand": bot_hand,
        "table": [],  # –ø–∞—Ä—ã –∫–∞—Ä—Ç (–∞—Ç–∞–∫—É—é—â–∞—è, –æ—Ç–±–∏–≤–∞—é—â–∞—è)
        "player_turn": True,
        "attacking_card": None,
        "defending_card": None,
        "game_over": False
    }

    await message.answer(
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–æ–∑—ã—Ä—å: {trump}\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã:",
        reply_markup=get_cards_kb(player_hand)
    )

@dp.message_handler(lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—ã")
async def show_cards(message: types.Message):
    user_id = message.from_user.id
    if user_id not in games or games[user_id]["game_over"]:
        await message.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ù–∞–∂–º–∏—Ç–µ 'üÉè –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.", reply_markup=main_kb)
        return
    hand = games[user_id]["player_hand"]
    await message.answer(f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(hand)}", reply_markup=get_cards_kb(hand))

@dp.message_handler(lambda msg: msg.text == "üö™ –°–¥–∞—Ç—å—Å—è")
async def surrender(message: types.Message):
    user_id = message.from_user.id
    if user_id in games and not games[user_id]["game_over"]:
        games[user_id]["game_over"] = True
        await message.answer("–í—ã —Å–¥–∞–ª–∏—Å—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", reply_markup=main_kb)
    else:
        await message.answer("–í—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –∏–≥—Ä–µ.", reply_markup=main_kb)

def can_beat(attack_card, defense_card, trump_suit):
    # –ú–æ–∂–Ω–æ –æ—Ç–±–∏—Ç—å, –µ—Å–ª–∏:
    # 1. –ö–∞—Ä—Ç—ã –æ–¥–Ω–æ–π –º–∞—Å—Ç–∏ –∏ –∫–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã —Å—Ç–∞—Ä—à–µ
    # 2. –ö–∞—Ä—Ç–∞ –∑–∞—â–∏—Ç—ã –∫–æ–∑—ã—Ä—å, –∞ –∞—Ç–∞–∫–∏ –Ω–µ –∫–æ–∑—ã—Ä—å
    attack_rank = ranks.index(attack_card[:-2]) if len(attack_card) == 3 else ranks.index(attack_card[:-1])
    defense_rank = ranks.index(defense_card[:-2]) if len(defense_card) == 3 else ranks.index(defense_card[:-1])
    attack_suit = attack_card[-2:] if len(attack_card) == 3 else attack_card[-1]
    defense_suit = defense_card[-2:] if len(defense_card) == 3 else defense_card[-1]

    if defense_suit == attack_suit and defense_rank > attack_rank:
        return True
    if defense_suit == trump_suit and attack_suit != trump_suit:
        return True
    return False

async def bot_defend(user_id):
    game = games[user_id]
    attack_card = game["attacking_card"]
    trump_suit = game["trump_suit"]
    bot_hand = game["bot_hand"]

    # –ò—â–µ–º –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –æ—Ç–±–∏—Ç—å—Å—è
    for card in bot_hand:
        if can_beat(attack_card, card, trump_suit):
            # –û—Ç–±–∏–ª—Å—è
            game["defending_card"] = card
            bot_hand.remove(card)
            game["bot_hand"] = bot_hand
            game["table"].append((attack_card, card))
            game["attacking_card"] = None
            return True
    # –ù–µ —Å–º–æ–≥ –æ—Ç–±–∏—Ç—å—Å—è
    return False

@dp.message_handler()
async def game_handler(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if user_id not in games or games[user_id]["game_over"]:
        await message.answer("–í—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ù–∞–∂–º–∏—Ç–µ 'üÉè –ù–∞—á–∞—Ç—å –∏–≥—Ä—É'.", reply_markup=main_kb)
        return

    game = games[user_id]

    if text == "üö™ –°–¥–∞—Ç—å—Å—è":
        game["game_over"] = True
        await message.answer("–í—ã —Å–¥–∞–ª–∏—Å—å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", reply_markup=main_kb)
        return

    if text not in game["player_hand"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏.", reply_markup=get_cards_kb(game["player_hand"]))
        return

    if not game["player_turn"]:
        await message.answer("–°–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç –±–æ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return

    # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
    attack_card = text
    game["player_hand"].remove(attack_card)
    game["attacking_card"] = attack_card
    game["table"] = [(attack_card, None)]
    game["player_turn"] = False

    await message.answer(f"–í—ã —Ö–æ–¥–∏—Ç–µ –∫–∞—Ä—Ç–æ–π {attack_card}. –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–±–∏—Ç—å—Å—è...")

    # –•–æ–¥ –±–æ—Ç–∞: –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–±–∏—Ç—å—Å—è
    if await bot_defend(user_id):
        await message.answer(f"–ë–æ—Ç –æ—Ç–±–∏–ª—Å—è –∫–∞—Ä—Ç–æ–π {game['defending_card']}.\n–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {', '.join(game['player_hand'])}", reply_markup=get_cards_kb(game["player_hand"]))
        game["player_turn"] = True
        game["attacking_card"] = None
        game["defending_card"] = None
        game["table"] = []
    else:
        # –ë–æ—Ç –Ω–µ –æ—Ç–±–∏–ª—Å—è, –±–µ—Ä–µ—Ç –∫–∞—Ä—Ç—ã
        game["bot_hand"].extend([attack_card])
        game["attacking_card"] = None
        game["table"] = []
        game["player_turn"] = True
        await message.answer("–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–±–∏—Ç—å—Å—è –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã. –í–∞—à —Ö–æ–¥ —Å–Ω–æ–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É.", reply_markup=get_cards_kb(game["player_hand"]))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    if len(game["player_hand"]) == 0:
        game["game_over"] = True
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=main_kb)
    elif len(game["bot_hand"]) == 0:
        game["game_over"] = True
        await message.answer("–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", reply_markup=main_kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
